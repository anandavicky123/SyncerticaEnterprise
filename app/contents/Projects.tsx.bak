"use client";

import React, { useEffect, useState } from "react";
import {
  ExternalLink,
  Plus,
  Github,
  CheckCircle,
  XCircle,
  RefreshCw,
  Folder,
  GitBranch,
  Cloud,
  Container,
} from "lucide-react";
import { useGitHubData } from "../hooks/useGitHubData";

interface Project {
  id: string;
  name: string;
  description?: string | null;
  repository?: string | null;
  status: string;
}

interface ProjectsProps {
  className?: string;
}

const Projects: React.FC<ProjectsProps> = ({ className = "" }) => {
  const { repositories, workflows, infrastructure, containers } = useGitHubData();

  const [projectsList, setProjectsList] = useState<Project[]>([]);
  const [loading, setLoading] = useState(false);
  const [showAdd, setShowAdd] = useState(false);
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [repository, setRepository] = useState("");
  const [status, setStatus] = useState("active");

  const [refreshing, setRefreshing] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState({ connected: false, user: null as any });
  const [error, setError] = useState<string | null>(null);

  const fetchProjects = async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await fetch("/api/projects");
      if (!res.ok) throw new Error(await res.text());
      const data = await res.json();
      setProjectsList(Array.isArray(data) ? data : []);
    } catch (err: any) {
      console.error("Failed to fetch projects", err);
      setError(typeof err === "string" ? err : err?.message || "Failed to fetch projects");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProjects();
  }, []);

  const createProject = async () => {
    if (!name) return alert("Project name is required");
    try {
      const res = await fetch("/api/projects", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, description: description || null, repository: repository || null, status }),
      });
      if (!res.ok) throw new Error(await res.text());
      const created: Project = await res.json();
      setProjectsList((p) => [created, ...p]);
      setShowAdd(false);
      setName("");
      setDescription("");
      setRepository("");
      setStatus("active");
    } catch (err) {
      console.error("Create project failed", err);
      alert("Failed to create project");
    }
  };

  const refreshData = async () => {
    setRefreshing(true);
    try {
      await fetchProjects();
      // Optionally refresh other GitHub/infra data here
    } finally {
      setRefreshing(false);
    }
  };

  return (
    <div className={`space-y-6 ${className}`}>
      <div className="bg-white rounded-lg border border-gray-200 p-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Github className="w-8 h-8 text-gray-800" />
            <div>
              <h2 className="text-2xl font-bold text-gray-900">Projects</h2>
              <p className="text-gray-600">GitHub Integration & DevOps Management</p>
            </div>
          </div>

          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              {connectionStatus.connected ? (
                <>
                  <CheckCircle className="w-5 h-5 text-green-500" />
                  <span className="text-green-700 font-medium">Connected</span>
                  {connectionStatus.user && <span className="text-gray-600">as {connectionStatus.user.login}</span>}
                </>
              ) : (
                <>
                  <XCircle className="w-5 h-5 text-red-500" />
                  <span className="text-red-700 font-medium">Disconnected</span>
                </>
              )}
            </div>

            <div className="flex items-center gap-2">
              <button
                onClick={refreshData}
                disabled={refreshing}
                className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg flex items-center gap-2 transition-colors disabled:opacity-50"
                title={`Refresh all GitHub data: ${repositories.length} repos, ${workflows.length} workflows, ${infrastructure.length} infra, ${containers.length} containers`}>
                <RefreshCw className={`w-4 h-4 ${refreshing ? "animate-spin" : ""}`} />
                {refreshing ? "Refreshing..." : "Refresh"}
              </button>
            </div>
          </div>
        </div>

        {error && (
          <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-800 text-sm">{error}</p>
          </div>
        )}
      </div>

      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          <button className="py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2 border-blue-500 text-blue-600">
            <Folder className="w-4 h-4" /> Projects ({projectsList.length})
          </button>
          <button className="py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2 border-transparent text-gray-500">
            <Folder className="w-4 h-4" /> Repositories ({repositories.length})
          </button>
          <button className="py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2 border-transparent text-gray-500">
            <GitBranch className="w-4 h-4" /> CI/CD ({workflows.length})
          </button>
          <button className="py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2 border-transparent text-gray-500">
            <Cloud className="w-4 h-4" /> Infrastructure ({infrastructure.length})
          </button>
          <button className="py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2 border-transparent text-gray-500">
            <Container className="w-4 h-4" /> Container ({containers.length})
          </button>
        </nav>
      </div>

      <div className="bg-white rounded-lg border border-gray-200 p-6">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold text-gray-900">Projects ({projectsList.length})</h3>
          <div className="flex items-center gap-2">
            <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2" onClick={() => setShowAdd(true)}>
              <Plus className="w-4 h-4" /> Add Project
            </button>
          </div>
        </div>

        {loading ? (
          <div className="text-center py-12">Loading projects...</div>
        ) : projectsList.length === 0 ? (
          <div className="text-center py-8">No projects yet</div>
        ) : (
          <div className="space-y-3">
            {projectsList.map((p) => (
              <div key={p.id} className="p-3 border rounded">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-medium">{p.name}</div>
                    {p.repository && (
                      <div className="text-xs text-gray-500">
                        {p.repository} <ExternalLink className="inline-block w-3 h-3 ml-1" />
                      </div>
                    )}
                    {p.description && <div className="text-sm text-gray-700 mt-1">{p.description}</div>}
                  </div>
                  <div className="text-sm text-gray-500">{p.status}</div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {showAdd && (
        <div className="fixed inset-0 z-40 flex items-center justify-center bg-black/40">
          <div className="bg-white rounded p-6 w-96">
            <h4 className="text-lg font-semibold mb-3">Create Project</h4>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                createProject();
              }}>
              <label className="block text-sm font-medium">Name*</label>
              <input className="w-full border p-2 rounded mb-2" value={name} onChange={(e) => setName(e.target.value)} required />

              <label className="block text-sm font-medium">Description</label>
              <textarea className="w-full border p-2 rounded mb-2" value={description} onChange={(e) => setDescription(e.target.value)} />

              <label className="block text-sm font-medium">Repository URL</label>
              <input className="w-full border p-2 rounded mb-2" value={repository} onChange={(e) => setRepository(e.target.value)} />

              <label className="block text-sm font-medium">Status</label>
              <select className="w-full border p-2 rounded mb-4" value={status} onChange={(e) => setStatus(e.target.value)}>
                <option value="active">active</option>
                <option value="on-hold">on-hold</option>
                <option value="completed">completed</option>
                <option value="archived">archived</option>
              </select>

              <div className="flex justify-end gap-2">
                <button type="button" className="px-3 py-2 border rounded" onClick={() => setShowAdd(false)}>
                  Cancel
                </button>
                <button type="submit" className="px-3 py-2 bg-blue-600 text-white rounded">
                  Create
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default Projects;
